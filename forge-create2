#!/usr/bin/env bash
#
# forge-create2 - Deterministic contract deployment using CREATE2
# 
# Uses the deterministic deployment proxy at 0x4e59b44847b379578588920ca78fbf26c0b4956c
# to deploy contracts at predictable addresses.
#
# USAGE:
#   forge-create2 [OPTIONS] <CONTRACT>
#
# CUSTOM OPTIONS:
#   --constructor-args <args>  Constructor arguments for the contract
#   --salt <hex>              Salt for deterministic address (default: 0x0)
#   --verify                  Verify contract on Etherscan after deployment  
#   --dry-run                 Calculate address without deploying
#   -h, --help               Display this help message
#
# All other options are passed through to forge/cast commands.
# For example: --rpc-url, --private-key, --etherscan-api-key, etc.
#
# EXAMPLES:
#   # Simple deployment
#   forge-create2 src/Token.sol --rpc-url <RPC> --private-key <KEY>
#
#   # With constructor args and custom salt
#   forge-create2 src/Token.sol --constructor-args "1000000" --salt 0x123
#
#   # Dry run to see deployment address
#   forge-create2 src/Token.sol --salt 0xdead --dry-run --rpc-url <RPC>
#
#   # Deploy and verify
#   forge-create2 src/Token.sol --verify --etherscan-api-key <KEY>

set -euo pipefail

# Constants
readonly SCRIPT_NAME="${0##*/}"
readonly DEFAULT_CREATE2_FACTORY="0x4e59b44847b379578588920ca78fbf26c0b4956c"
readonly CREATE2_FACTORY="${CREATE2_FACTORY:-$DEFAULT_CREATE2_FACTORY}"
readonly DEFAULT_SALT="0x0000000000000000000000000000000000000000000000000000000000000000"

# Custom arguments
CONTRACT=""
CONSTRUCTOR_ARGS=""
SALT=""
VERIFY=false
DRY_RUN=false
ENCODED_ARGS=""
CONSTRUCTOR_SIG=""

# Arrays for passthrough arguments
declare -a CAST_SEND_ARGS=()
declare -a CAST_READ_ARGS=()
declare -a FORGE_ARGS=()

# Display usage
usage() {
    cat >&2 <<EOF
$SCRIPT_NAME - Deterministic contract deployment using CREATE2

Usage: $SCRIPT_NAME [OPTIONS] <CONTRACT>

CONTRACT can be:
  - Contract name: SimpleStorage
  - Path with contract: src/SimpleStorage.sol:SimpleStorage

Custom Options:
  --constructor-args <args>  Constructor arguments (consumes all args until next --)
  --salt <hex>              Salt for deterministic address (default: 0x0)
  --verify                  Verify contract on Etherscan after deployment
  --dry-run                 Calculate address without deploying
  -h, --help               Display this help message

Standard forge/cast options are automatically passed through:
  --rpc-url <url>          RPC endpoint URL
  --private-key <key>      Private key for deployment
  --account <name>         Use saved account from keystore
  --etherscan-api-key <key> API key for verification
  --gas-price <price>      Gas price for transactions
  --gas-limit <limit>      Gas limit for transactions
  ...and all other forge/cast options

Environment Variables:
  CREATE2_FACTORY          CREATE2 factory address (default: 0x4e59b44847b379578588920ca78fbf26c0b4956c)
  FORGE_CREATE2_PRIVATE_KEY Private key for deployment
  ETHERSCAN_API_KEY        API key for contract verification

Examples:
  # Deploy using just contract name
  $SCRIPT_NAME SimpleStorage --rpc-url https://eth.rpc --private-key 0x...

  # Deploy using path with contract name
  $SCRIPT_NAME src/Token.sol:Token --rpc-url https://eth.rpc --account myDeployer

  # With constructor arguments (no quotes needed)
  $SCRIPT_NAME Token --constructor-args 1000000 MyToken MTK --rpc-url https://eth.rpc

  # Dry run with custom salt
  $SCRIPT_NAME MyContract --salt 0xdeadbeef --dry-run --rpc-url https://eth.rpc

  # Deploy and verify
  $SCRIPT_NAME src/Token.sol:Token --verify --rpc-url https://eth.rpc \\
    --account myDeployer --etherscan-api-key <KEY>
EOF
    exit "${1:-1}"
}

# Log functions
log_info() { echo "[INFO] $*" >&2; }
log_error() { echo "[ERROR] $*" >&2; }
log_success() { echo "[SUCCESS] $*" >&2; }

# Validate hex string
is_valid_hex() {
    [[ "$1" =~ ^[0-9a-fA-F]*$ ]]
}

# Normalize hex to 0x-prefixed lowercase
normalize_hex() {
    local hex="${1#0x}"
    if is_valid_hex "$hex"; then
        echo "0x${hex,,}"
    else
        log_error "Invalid hex value: $1"
        return 1
    fi
}

# Pad hex to specified length
pad_hex() {
    local hex="${1#0x}"
    local length="$2"
    printf "%0${length}s" "$hex" | tr ' ' '0'
}

# Calculate CREATE2 address
calculate_create2_address() {
    local factory="$1"
    local salt="$2"
    local init_code="$3"
    
    local init_code_hash
    init_code_hash=$(cast keccak "$init_code")
    
    # CREATE2: keccak256(0xff ++ factory ++ salt ++ keccak256(init_code))[12:]
    local preimage="0xff${factory#0x}${salt#0x}${init_code_hash#0x}"
    local address_hash
    address_hash=$(cast keccak "$preimage")
    
    echo "0x${address_hash: -40}"
}

# Verify contract function
verify_contract() {
    log_info "Waiting for block explorer indexing..."
    sleep 10
    
    log_info "Verifying contract..."
    
    # Get compilation target from artifact
    local compilation_target
    compilation_target=$(jq -r '.metadata.settings.compilationTarget | keys[0] // empty' "$ARTIFACT_PATH")
    
    # Build contract reference
    local verify_ref="${compilation_target:-$CONTRACT_PATH}:${CONTRACT_NAME}"
    
    # Build verify command with passthrough args (excluding --no-metadata)
    local -a verify_args=()
    for arg in "${FORGE_ARGS[@]}"; do
        if [[ "$arg" != "--no-metadata" ]]; then
            verify_args+=("$arg")
        fi
    done
    local -a verify_cmd=(forge verify-contract "${verify_args[@]}" "$DEPLOYMENT_ADDRESS" "$verify_ref")
    
    # Add constructor args if present
    if [[ -n "${ENCODED_ARGS:-}" ]]; then
        verify_cmd+=(--constructor-args "$ENCODED_ARGS")
    elif [[ -n "$CONSTRUCTOR_ARGS" ]]; then
        # Re-encode if needed (when verifying already deployed contract)
        eval "local encoded=\$(cast abi-encode \"\$CONSTRUCTOR_SIG\" $CONSTRUCTOR_ARGS)" || return 1
        verify_cmd+=(--constructor-args "$encoded")
    fi
    
    # Add compiler version if available
    local compiler_version
    compiler_version=$(jq -r '.metadata.compiler.version // empty' "$ARTIFACT_PATH")
    [[ -n "$compiler_version" ]] && verify_cmd+=(--compiler-version "$compiler_version")
    
    # Run verification
    if "${verify_cmd[@]}" --watch; then
        log_success "Contract verified!"
    else
        log_error "Verification failed"
    fi
}

# Parse arguments
[[ $# -eq 0 ]] && usage 0

while [[ $# -gt 0 ]]; do
    case "$1" in
        --constructor-args)
            shift # Move past --constructor-args
            CONSTRUCTOR_ARGS=""
            # Collect all arguments until we hit another flag starting with --
            while [[ $# -gt 0 ]] && [[ ! "$1" =~ ^-- ]]; do
                if [[ -n "$CONSTRUCTOR_ARGS" ]]; then
                    CONSTRUCTOR_ARGS="$CONSTRUCTOR_ARGS $1"
                else
                    CONSTRUCTOR_ARGS="$1"
                fi
                shift
            done
            [[ -z "$CONSTRUCTOR_ARGS" ]] && { log_error "--constructor-args requires at least one value"; exit 1; }
            ;;
        --salt)
            SALT="${2:-}"
            [[ -z "$SALT" ]] && { log_error "--salt requires a value"; exit 1; }
            shift 2
            ;;
        --verify)
            VERIFY=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            usage 0
            ;;
        -*)
            # Collect all other flags for passthrough
            if [[ "${2:-}" && ! "${2:-}" =~ ^- ]]; then
                # Flag with value
                case "$1" in
                    # Cast send only - wallet options
                    --private-key|--account|--keystore|--password|--password-file|\
                    --mnemonic|--mnemonic-passphrase|--mnemonic-derivation-path|--mnemonic-index|\
                    -f|--from)
                        CAST_SEND_ARGS+=("$1" "$2")
                        ;;
                    # Cast send only - transaction options
                    --gas-limit|--gas-price|--priority-gas-price|--value|--nonce|\
                    --blob-gas-price|--auth|--access-list|--path|--timeout)
                        CAST_SEND_ARGS+=("$1" "$2")
                        ;;
                    # Network options - forge verify needs rpc-url and chain
                    -r|--rpc-url|-c|--chain)
                        CAST_SEND_ARGS+=("$1" "$2")
                        CAST_READ_ARGS+=("$1" "$2")
                        FORGE_ARGS+=("$1" "$2")
                        ;;
                    # Network options - only for cast commands
                    --jwt-secret|--rpc-timeout|--rpc-headers)
                        CAST_SEND_ARGS+=("$1" "$2")
                        CAST_READ_ARGS+=("$1" "$2")
                        ;;
                    # Forge verify only
                    -e|--etherscan-api-key|--verifier|--verifier-api-key|--verifier-url|\
                    --retries|--delay|--compiler-version|--compilation-profile|\
                    --num-of-optimizations|--constructor-args-path)
                        FORGE_ARGS+=("$1" "$2")
                        ;;
                    # Forge build and verify
                    --optimizer-runs|--evm-version|--libraries|--root|--via-ir)
                        FORGE_ARGS+=("$1" "$2")
                        ;;
                    # Forge build only
                    --ignored-error-codes|--use|--optimize|\
                    --extra-output|--extra-output-files|-o|--out|--revert-strings|\
                    --build-info-path|-C|--contracts|-R|--remappings|--remappings-env|\
                    --cache-path|--lib-paths|--skip)
                        FORGE_ARGS+=("$1" "$2")
                        ;;
                    # Cast read operations
                    -B|--block|--confirmations)
                        CAST_READ_ARGS+=("$1" "$2")
                        ;;
                    # Common display options
                    --color|-v|--verbosity|-j|--threads|--jobs)
                        CAST_SEND_ARGS+=("$1" "$2")
                        CAST_READ_ARGS+=("$1" "$2")
                        FORGE_ARGS+=("$1" "$2")
                        ;;
                    *)
                        # Unknown flags - pass to all for safety
                        CAST_SEND_ARGS+=("$1" "$2")
                        CAST_READ_ARGS+=("$1" "$2")
                        FORGE_ARGS+=("$1" "$2")
                        ;;
                esac
                shift 2
            else
                # Flag without value
                case "$1" in
                    # Cast send only - wallet options
                    -i|--interactive|-l|--ledger|-t|--trezor|--aws|--unlocked)
                        CAST_SEND_ARGS+=("$1")
                        ;;
                    # Cast send only - transaction options
                    --legacy|--blob|--async)
                        CAST_SEND_ARGS+=("$1")
                        ;;
                    # Forge build only
                    --no-metadata|--names|--sizes|--ignore-eip-3860|--no-cache|--eof|\
                    --force|--deny-warnings|--no-auto-detect|--offline|\
                    --ast|--build-info|--hardhat)
                        FORGE_ARGS+=("$1")
                        ;;
                    # Forge verify only
                    --flatten|--skip-is-verified-check|--watch|--show-standard-json-input|\
                    --guess-constructor-args|-f)
                        FORGE_ARGS+=("$1")
                        ;;
                    # Forge build and verify
                    --via-ir)
                        FORGE_ARGS+=("$1")
                        ;;
                    # Network options - only for cast
                    --flashbots)
                        CAST_SEND_ARGS+=("$1")
                        CAST_READ_ARGS+=("$1")
                        ;;
                    # Common display options
                    --json|-q|--quiet)
                        CAST_SEND_ARGS+=("$1")
                        CAST_READ_ARGS+=("$1")
                        FORGE_ARGS+=("$1")
                        ;;
                    *)
                        # Unknown flags - pass to all for safety
                        CAST_SEND_ARGS+=("$1")
                        CAST_READ_ARGS+=("$1")
                        FORGE_ARGS+=("$1")
                        ;;
                esac
                shift
            fi
            ;;
        *)
            if [[ -z "$CONTRACT" ]]; then
                CONTRACT="$1"
            else
                log_error "Unexpected argument: $1"
                usage 1
            fi
            shift
            ;;
    esac
done

# Validate required arguments
[[ -z "$CONTRACT" ]] && { log_error "Contract path is required"; usage 1; }

# Process salt
if [[ -z "$SALT" ]]; then
    SALT="$DEFAULT_SALT"
else
    SALT=$(normalize_hex "$SALT") || exit 1
    SALT="0x$(pad_hex "$SALT" 64)"
fi

# Build the project with appropriate forge flags only
log_info "Building project..."
# Filter flags by pairs to handle values correctly
build_flags=()
skip_next=false
for i in "${!FORGE_ARGS[@]}"; do
    if [[ "$skip_next" == true ]]; then
        skip_next=false
        continue
    fi
    
    flag="${FORGE_ARGS[$i]}"
    case "$flag" in
        -r|--rpc-url|-c|--chain|-e|--etherscan-api-key|--verifier*|--retries|--delay)
            # Skip network and verify-only flags for build
            skip_next=true
            ;;
        *)
            build_flags+=("$flag")
            # Check if this flag has a value
            next_idx=$((i + 1))
            if [[ $next_idx -lt ${#FORGE_ARGS[@]} ]] && [[ ! "${FORGE_ARGS[$next_idx]}" =~ ^- ]]; then
                build_flags+=("${FORGE_ARGS[$next_idx]}")
                skip_next=true
            fi
            ;;
    esac
done
# Debug: Show build flags
[[ "${DEBUG:-}" == "1" ]] && log_info "Build flags: ${build_flags[*]}"
forge build "${build_flags[@]}" || { log_error "Build failed"; exit 1; }

# Get the output directory from forge config with the same flags
OUT_DIR=$(forge config --json "${build_flags[@]}" 2>/dev/null | jq -r '.out // "out"') || OUT_DIR="out"

# Parse contract identifier
# Support formats: ContractName or path/to/Contract.sol:ContractName
if [[ "$CONTRACT" == *":"* ]]; then
    # Format: path/to/Contract.sol:ContractName
    CONTRACT_PATH="${CONTRACT%%:*}"
    CONTRACT_NAME="${CONTRACT##*:}"
    CONTRACT_FILE=$(basename "$CONTRACT_PATH")
    ARTIFACT_PATH="${OUT_DIR}/${CONTRACT_FILE}/${CONTRACT_NAME}.json"
else
    # Format: ContractName - need to find the artifact
    CONTRACT_NAME="$CONTRACT"
    
    # Search for the contract artifact in the output directory
    ARTIFACT_PATH=""
    while IFS= read -r -d '' file; do
        if [[ "$(basename "$file" .json)" == "$CONTRACT_NAME" ]]; then
            ARTIFACT_PATH="$file"
            break
        fi
    done < <(find "$OUT_DIR" -name "${CONTRACT_NAME}.json" -type f -print0 2>/dev/null)
    
    if [[ -z "$ARTIFACT_PATH" ]]; then
        log_error "Contract artifact not found for: $CONTRACT_NAME"
        log_error "Make sure the contract is compiled and exists in $OUT_DIR"
        exit 1
    fi
fi

# Verify artifact exists
if [[ ! -f "$ARTIFACT_PATH" ]]; then
    log_error "Artifact not found: $ARTIFACT_PATH"
    exit 1
fi

# Extract bytecode
BYTECODE=$(jq -r '.bytecode.object // empty' "$ARTIFACT_PATH")
if [[ -z "$BYTECODE" || "$BYTECODE" == "null" ]]; then
    log_error "No bytecode found. Contract might be abstract or have unlinked libraries."
    exit 1
fi

# Prepare init code
INIT_CODE="$BYTECODE"
if [[ -n "$CONSTRUCTOR_ARGS" ]]; then
    log_info "Encoding constructor arguments..."
    
    # Get constructor ABI
    CONSTRUCTOR_JSON=$(jq -r '.abi[] | select(.type == "constructor")' "$ARTIFACT_PATH" 2>/dev/null)
    
    if [[ -z "$CONSTRUCTOR_JSON" || "$CONSTRUCTOR_JSON" == "null" ]]; then
        log_error "Constructor ABI not found"
        exit 1
    fi
    
    # Function to recursively build type signature for tuples
    build_type_sig() {
        local input_json="$1"
        local type=$(echo "$input_json" | jq -r '.type')
        
        if [[ "$type" == "tuple" ]]; then
            # Build tuple signature from components
            local components=$(echo "$input_json" | jq -r '.components[] | @json' | while read -r comp; do
                build_type_sig "$comp"
            done | tr '\n' ',' | sed 's/,$//')
            echo "($components)"
        else
            echo "$type"
        fi
    }
    
    # Extract constructor inputs to build signature
    CONSTRUCTOR_TYPES=$(echo "$CONSTRUCTOR_JSON" | jq -c '.inputs[]' | while read -r input; do
        build_type_sig "$input"
    done | tr '\n' ',' | sed 's/,$//')
    
    if [[ -z "$CONSTRUCTOR_TYPES" ]]; then
        log_error "Constructor has no inputs but arguments were provided"
        exit 1
    fi
    
    # Build constructor signature
    CONSTRUCTOR_SIG="constructor($CONSTRUCTOR_TYPES)"
    
    # Encode arguments safely using eval (needed for proper argument parsing)
    # The constructor signature is safely built from the ABI above
    eval "ENCODED_ARGS=\$(cast abi-encode \"\$CONSTRUCTOR_SIG\" $CONSTRUCTOR_ARGS)" || exit 1
    INIT_CODE="${BYTECODE}${ENCODED_ARGS#0x}"
fi

# Calculate deployment address
DEPLOYMENT_ADDRESS=$(calculate_create2_address "$CREATE2_FACTORY" "$SALT" "$INIT_CODE")
log_info "Factory: $CREATE2_FACTORY"
log_info "CREATE2 address: $DEPLOYMENT_ADDRESS"

# Check if already deployed (unless dry run)
if [[ "$DRY_RUN" != true ]]; then
    EXISTING_CODE=$(cast code "${CAST_READ_ARGS[@]}" "$DEPLOYMENT_ADDRESS" 2>/dev/null || echo "0x")
    
    if [[ "$EXISTING_CODE" != "0x" && -n "$EXISTING_CODE" ]]; then
        log_info "Contract already deployed at $DEPLOYMENT_ADDRESS"
        
        # Still verify if requested
        if [[ "$VERIFY" == true ]]; then
            verify_contract
        fi
        exit 0
    fi
fi

# Exit if dry run
if [[ "$DRY_RUN" == true ]]; then
    log_success "Dry run complete. Contract would be deployed to: $DEPLOYMENT_ADDRESS"
    exit 0
fi

# Deploy contract
log_info "Deploying contract via CREATE2..."
log_info "Factory: $CREATE2_FACTORY"
log_info "Salt: $SALT"

# Prepare calldata
CALLDATA="${SALT#0x}${INIT_CODE#0x}"

# Send deployment transaction
TX_RESULT=$(cast send "${CAST_SEND_ARGS[@]}" "$CREATE2_FACTORY" "0x$CALLDATA" --json 2>&1) || {
    log_error "Transaction failed"
    echo "$TX_RESULT" >&2
    exit 1
}

TX_HASH=$(echo "$TX_RESULT" | jq -r '.transactionHash // empty')
if [[ -z "$TX_HASH" ]]; then
    log_error "Failed to extract transaction hash"
    echo "$TX_RESULT" >&2
    exit 1
fi

log_info "Transaction: $TX_HASH"
log_info "Waiting for confirmation..."

# Wait for receipt
RECEIPT=$(cast receipt "${CAST_READ_ARGS[@]}" "$TX_HASH" --json) || {
    log_error "Failed to get receipt"
    exit 1
}

STATUS=$(echo "$RECEIPT" | jq -r '.status // empty')
if [[ "$STATUS" != "0x1" && "$STATUS" != "1" ]]; then
    log_error "Transaction reverted"
    echo "$RECEIPT" | jq . >&2
    exit 1
fi

log_success "Contract deployed to: $DEPLOYMENT_ADDRESS"

# Verify if requested
[[ "$VERIFY" == true ]] && verify_contract